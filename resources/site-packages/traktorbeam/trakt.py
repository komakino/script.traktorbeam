from datetime import datetime, timedelta
from traktorbeam import log, addon
import urllib2, pytz
from dateutil.parser import parse as parseDate

USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.66 Safari/537.36"

class traktAPI():

    token = None

    def __init__(self):
        log.info('Init traktorbeam trakt')
        if not self.token:
            self.requestToken()
        self.getToken()

    def getToken(self):
        log.info("Token is: %s" % self.token)

    def requestToken(self):
        if self.token:
            return True
        username = addon.getSetting("trakt_username")
        password = addon.getSetting("trakt_password")

        data = """
        {
            "login": "%s",
            "password": "%s"
        }
        """ % (username,password)

        response = self.request('auth/login',data=data,retry=True,withToken=False)
        if "token" in response and response["token"]:
            self.token = response["token"]
            return True
        else:
            self.token = None
            return False

    def parse_json(self,data):
            try:
                import simplejson as json
            except ImportError:
                import json
            jsonData = json.loads(data)
            log.info(jsonData)
            return jsonData

    def request(self,url,data=None,retry=False,withToken=True):

        headers = {
            'content-type': 'application/json',
            # 'trakt-api-key': '14b5146e25005b96c03cb8b125d7b5cb452e15e0cfe073685dc92992bbb707f9', # komakino
            'trakt-api-key': 'd4161a7a106424551add171e5470112e4afdaf2438e6ef2fe0548edc75924868', # script.trakt
            # 'trakt-api-key': '90b2bb1a8203e81a0272fb8717fa8b19ec635d8568632e41d1fcf872a2a2d9d0', # stolen ;)
            'trakt-api-version': '2'
        }

        if withToken:
            headers.update({
                'trakt-user-login': addon.getSetting("trakt_username"),
                'trakt-user-token': self.token
            })

        fullurl = 'https://api-v2launch.trakt.tv/%s' % url

        log.info("Requesting %s with headers %s" % (fullurl,headers))

        req = urllib2.Request(fullurl,data,headers)
        req.add_header("User-Agent", USER_AGENT)

        try:
            response = urllib2.urlopen(req)
        except urllib2.HTTPError, e:
            log.error("http error: %s => %d %s" % (url, e.code, e.reason))
            return {}

        return self.parse_json(response.read())

    def getEpisodes(self):
        # @todo Store last_sync_date
        days      = 15
        now       = datetime.now().replace(tzinfo=pytz.UTC)
        fromdate  = (now - timedelta(days=days-1)).strftime('%Y-%m-%d')

        response  = self.request("calendars/my/shows/%s/%s" % (fromdate,days))

        result    = []

        for episode in response:
            # Make sure the episode has aired
            if parseDate(episode["first_aired"]) < now:
                result.append({
                    "type":             "show",
                    "id":               episode["show"]["ids"]["tvdb"],
                    "episode_id":       episode["episode"]["ids"]["tvdb"],
                    "title":            episode["show"]["title"],
                    "episode_title":    episode["episode"]["title"],
                    "year":             episode["show"]["year"],
                    "season":           episode["episode"]["season"],
                    "episode":          episode["episode"]["number"],
                })

        return result

    def getWatchlist(self):
        response  = self.request("/users/%s/watchlist/movies" % (addon.getSetting("trakt_username")))

        result = []

        for item in response:
            result.append({
                "type": "movie",
                "id": item["movie"]["ids"]["imdb"],
                "title": item["movie"]["title"],
                "year": item["movie"]["year"],
            })

        return result

trakt = traktAPI()