import xbmcgui, feedparser, re
from traktorbeam import addon, log

def extractItems(items):
    movies = []

    for item in items:

        movie = {"type":"movie"}

        matches = re.search('^(.*) \((\\d{4})\)$',item["title"])

        # If no match is found, it could be a TV series where instead of (2012) it would be like (2012 TV Series)
        if matches:
            movie["title"] = matches.group(1)
            movie["year"] = int(matches.group(2))

            matches = re.search('\/(tt\d*)',item["id"])

            if matches:
                movie["id"] = matches.group(1)
                movies.append(movie)
        else:
            log.info("Could not add item with title '%s'" % item["title"])

    return movies

def getWatchlist():
    url = "http://rss.imdb.com/user/%s/watchlist" % addon.getSetting("imdb_userid")

    feed = feedparser.parse(url)

    if feed["status"] is not 200:
        xbmcgui.Dialog().notification('TraktorBeam','Could not retrieve watchlist. Make sure your watchlist is public!',icon=xbmcgui.NOTIFICATION_ERROR)
        return False

    return extractItems(feed.entries)


def getUserlist():

    ret = xbmcgui.Dialog().input('Please enter an IMDb user ID')

    if not ret:
        return False

    url = "http://rss.imdb.com/user/%s/lists" % ret

    feed = feedparser.parse(url)

    if feed["status"] is not 200:
        xbmcgui.Dialog().notification('TraktorBeam','Could not find IMDb user',icon=xbmcgui.NOTIFICATION_ERROR)
        return False

    ret = xbmcgui.Dialog().select(feed.feed.title, [entry.title for entry in feed.entries])

    if ret < 0:
        return False

    url = feed.entries[ret].link.replace('//www','//rss')

    feed = feedparser.parse(url)

    if feed["status"] is not 200:
        xbmcgui.Dialog().notification('TraktorBeam','Could not retrieve list',icon=xbmcgui.NOTIFICATION_ERROR)
        return False

    return extractItems(feed.entries)
